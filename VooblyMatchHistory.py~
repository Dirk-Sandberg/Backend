# -*- coding: utf-8 -*-
"""
Created on Sat Mar 24 16:40:30 2018

@author: Erik
"""
apiKey = "camzdurvkmdaar6cy83iovs6pid3u4gw"
apiURL = "http://www.voobly.com/api/validate?key="+apiKey


import requests
import voobly
from bs4 import BeautifulSoup
from datetime import datetime


class VooblyScraper():
    def __init__(self):
        self.loginUrl = "https://www.voobly.com/login"
        self.authUrl = self.loginUrl + "/auth"
        self.matchUrl = "https://www.voobly.com/profile/view/124993231/Matches"
        self.s = requests.session()
        self.apiKey = "camzdurvkmdaar6cy83iovs6pid3u4gw"
        self.username = "Akers"
        self.password = "Gr1kjins"
        self.loginInfo = {"username":"Akers", "password":"Gr1kjins"}
        print(self.loginInfo)
        self.voobly = voobly.Voobly(self.apiKey)
        self.voobly.init()
        self.connect()
        
    def connect(self):

        firstGetRequest = self.s.get(self.loginUrl)
        postRequest = self.s.post(self.authUrl, data=self.loginInfo)
        
    def checkHistory(self,player,opponent,earliestPossibleDate,LatestPossibleDate):
        print("Match  dates don't seem to match up with what's on Voobly -- which one is correct?!")
        print("Figured it out -- scraping data gives UTC time, while web page shows local time.")
        print("Need to account for that when checking if date is within timeframe")

        playersWhoBeatThisGuy = []
        losers = []
        matchDates = []
        vooblyResponse = self.voobly.find_user(player)
        playerIdNumberFromVoobly = vooblyResponse.split("\n")[1].split(",")[0]
        getRequest = self.s.get("https://www.voobly.com/profile/view/"+ playerIdNumberFromVoobly + "/Matches", params=params)
        self.test = getRequest.content
        soup = BeautifulSoup(getRequest.content, "html.parser") # parsed html
        print("Will need to search through all match history in the future, rather than just the first page.")

        main thing to do: scrape all match history pages until date is outside of range (+1)
        allTDs = soup.findAll("td")
        for i, td in enumerate(allTDs):
            if "has won" in td.text:
                # Get the winner
                for a in td.findAll("a"):
                    if ( a.text[0] != "[" ) and ( a.text[-1] != "]"): # Don't want clan tags
                        playersWhoBeatThisGuy.append(a.text)
                # Get the date
                # date is in TD before the "has won" TD
                matchDate = allTDs[i-1].text
                print(matchDate)
                matchDate = self.convertDate(matchDate) # Correct format
                print(matchDate)
                matchDates.append(matchDate)
                # Get the other player (loser)
                loser = allTDs[i+1].text
                losers.append(loser)
                # -- If "OPPONENT" not in loser or winners: they didn't play!
                    
                    
            lastTd = td
        self.test2 = playersWhoBeatThisGuy
        self.test3 = matchDates
        print("Need to check to make sure this was the only match they played.")
        print("Otherwise, need to check all matches and get the first one played  in the timeframe allotted for the match!")

        if (opponent not in playersWhoBeatThisGuy) and (opponent not in losers):
            return "N/A"
        for i, winner in enumerate(playersWhoBeatThisGuy):
            if winner in opponent: # If the winner of this match was the selected opponent for this bracket
                dateIsInsideMargin = self.checkIfDateIsInsideMargin(matchDates[i],earliestPossibleDate,LatestPossibleDate)
                if dateIsInsideMargin:
                    return opponent # opponent was a winner
        return player # If no opponent was returned, the player won
    
    def close(self):
        self.s.close()
        

    def checkIfDateIsINsideMargin(date,left,right):
        # all dates have form yyyy-mm-dd
        left = datetime.strptime(left,  "%Y-%m-%d")
        date = datetime.strptime(date,  "%Y-%m-%d")
        right = datetime.strptime(right,"%Y-%m-%d")
        if (date < left):
            return -1 # Date is too early - use return value to skip the rest of this match
        elif (date > right): # Date is too late - use return value to stop searching web pages
            return 1
        else: # Date is between the start/end date of tournaments.
            return 0

        
    def convertDate(self,date):
        '''
        Converts date format from Voobly (6 March 2018) to standard (yyyy-mm-dd)
        '''
        splitDate = date.split(" ")
        months = ["January","February","March","April","May","June","July","August","September","October","November","December"]
        day = splitDate[0]
        month = splitDate[1]
        year = splitDate[2]
        month = months.index(month) + 1
        month = str(month)
        if len(month) != 2:
            month = "0" + month
        if len(day) != 2:
            day = "0" + day
        return "-".join([year,month,day])
